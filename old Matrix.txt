#pragma once

#include "Base.h"
#include "Vector.h"
#include <tuple>

using namespace std;

namespace mat_vec {

class Matrix {
private:
    Vector* matrix;
    size_t , len2;
public:
    Matrix(size_t size, double value = 0): len1(size), len2(size), matrix(new Vector*[size]){
        for (int i = 0; i < len1; i++)
        {
            matrix[i] = new Vector(len1);
        }
    };
  /*static Matrix eye(size_t size, double value = 0){
      matrix = new Vector*[size];
      int j = 0;
      for (int i = 0; i < this->len1; i++)
      {
          matrix[i] = new Vector(len1);
          matrix[i][j] = 1;
          j++;
      }
  };*/
  Matrix(size_t rows, size_t cols, double value = 0): len1(rows),len2(cols), matrix(new Vector*[rows])
      {
          for (int i = 0; i < len1; i++)
          {
              matrix[i] = new Vector(len2);
          }
      };
  //Matrix(const Matrix &src);
  Matrix &operator=(const Matrix &src){
      matrix = new Vector*[src.len1];
      for (int i = 0; i < len1; i++){
          matrix[i] = src.matrix[i];
      }
  };
  //~Matrix();

  //void reshape(size_t rows, size_t cols);
  //std::pair<size_t, size_t> shape() const;
  void clear(){
      matrix = new Vector*[len1];
      for (int i = 0; i < len1; i++)
      {
          matrix[i] = new Vector(len2);
      }
  };

  /*double get(size_t row, size_t col) const{
      return matrix[row] [col];
  };*/

  Matrix operator+(const Matrix &matrix_) const{

      if (this->len1 == matrix_.len1 && this->len2 == matrix_.len2)
      {
          Matrix* returnMatrix = new Matrix(len1,len2);
          for (int i = 0; i < this->len1; i++)
          {
              (*returnMatrix).matrix[i] = ((*(*this).matrix[i]) + (*matrix_.matrix[i]));
          }
          return *returnMatrix;
      }
      else
      {
          cout << "Cannot make sum because of diffrent matrixs size." << endl;
      }
  };
  Matrix &operator+=(const Matrix &matrix_){
      if (this->len1 == matrix_.len1 && this->len2 == matrix_.len2)
      {
          //Matrix* returnMatrix = new Matrix(len1,len2);
          for (int i = 0; i < this->len1; i++)
          {
              this->matrix[i] = ((*(*this).matrix[i]) + (*matrix_.matrix[i]));
          }
      }
      else
      {
          cout << "Cannot make sum because of diffrent matrixs size." << endl;
      }
  };

  Matrix operator-(const Matrix &matrix_) const{

      if (this->len1 == matrix_.len1 && this->len2 == matrix_.len2)
      {
          Matrix* returnMatrix = new Matrix(len1,len2);
          for (int i = 0; i < this->len1; i++)
          {
              (*returnMatrix).matrix[i] = ((*(*this).matrix[i]) - (*matrix_.matrix[i]));
          }
          return *returnMatrix;
      }
      else
      {
          cout << "Cannot make sum because of diffrent matrixs size." << endl;
      }
  };
  Matrix &operator-=(const Matrix &matrix_){
      if (this->len1 == matrix_.len1 && this->len2 == matrix_.len2)
      {
          //Matrix* returnMatrix = new Matrix(len1,len2);
          for (int i = 0; i < this->len1; i++)
          {
              this->matrix[i] = ((*(*this).matrix[i]) - (*matrix_.matrix[i]));
          }
      }
      else
      {
          cout << "Cannot make sum because of diffrent matrixs size." << endl;
      }
  }

  Matrix operator*(const Matrix &_matrix) const{
      if (len1 != _matrix.len2)
      {
          cout << "Cannot make multiplication" << endl;
      }
      Matrix* returnMatrix = new Matrix(len2, _matrix.len1);
      for (int i = 0; i<len2; i++)
      {
          for (int j = 0; j<_matrix.len1; j++)
          {
              (*returnMatrix).matrix[i] = 0; // не уверен, что получится, но вроде не жалуется
              for (int k = 0; k<len1; k++)
                  (*returnMatrix->matrix)[i][j] = (*returnMatrix->matrix)[i][j] + (this->matrix[i][k] * _matrix.matrix[k][j]); // посмотреть че будет потом
          }
      }
      return *returnMatrix;
  };

  /*Matrix &operator*=(const Matrix &_matrix){
      if (len1 != _matrix.len2)
      {
          cout << "Cannot make multiplication" << endl;
      }
      Matrix* returnMatrix = new Matrix(len2, _matrix.len1);
      for (int i = 0; i<len2; i++)
      {
          for (int j = 0; j<_matrix.len1; j++)
          {
              (*returnMatrix)[i][j] = 0;
              for (int k = 0; k<_n; k++)
                  (*returnMatrix)[i][j] += (*this)[i][k] * _matrix[k][j];
          }
      }
      this->matrix = returnMatrix;
  };*/

  Matrix operator*(double k) const{
      Matrix* returnMatrix = new Matrix(len1,len2);
      for (int i = 0; i < this->len2; i++)
      {
          (*returnMatrix).matrix[i] = ((*(*this).matrix[i])  * k);
      }
      return *returnMatrix;
  };
  Matrix &operator*=(double k);

  Matrix operator/(double k) const;
  Matrix &operator/=(double k);

  Matrix transposed()const{
      Matrix* returnMatrix = new Matrix(len1,len2);
      for (int i = 0; i < len1; i++)
          for (int j = 0; j < len2; j++)
              returnMatrix->matrix[j][i] = this->matrix[i][j];  //возможно сработает, посмотреть потом
      //(*returnMatrix)[j][i] = X[i][j];
      return *returnMatrix;
  };
  void transpose(){
      Matrix* returnMatrix = new Matrix(len1, len2);
      for (int i = 0; i < len1; i++)
          for (int j = 0; j < len2; j++)
              (*returnMatrix).matrix[j][i] = (*this).matrix[i][j];
      //(*returnMatrix)[j][i] = X[i][j];
      for (int i = 0; i < len1; i++){
          matrix[i] = (*returnMatrix).matrix[i];
      }
  };

  double det() const;
  Matrix inv() const;

  Vector operator*(const Vector &vector) const;

  bool operator==(const Matrix &_matrix) const{
      if (len1 == _matrix.len1 && len2 == _matrix.len2){
          for (int i = 0; i < len1; i++){
              if (matrix[i] != _matrix.matrix[i]) return false;
          }
      } else return false;
      return true;
  };
  bool operator!=(const Matrix &_matrix) const{
      if (len1 == _matrix.len1 && len2 == _matrix.len2){
          for (int i = 0; i < len1; i++){
              if (matrix[i] != _matrix.matrix[i]) return true;
          }
      } else return true;
      return false;
  };
  };

} // namespace mat_vec
